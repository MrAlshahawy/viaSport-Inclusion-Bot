#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace viaSportResourceBot.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ViaSportBC_SQLdb")]
	public partial class BotDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertDisability(Disability instance);
    partial void UpdateDisability(Disability instance);
    partial void DeleteDisability(Disability instance);
    partial void InsertReferenceActivity(ReferenceActivity instance);
    partial void UpdateReferenceActivity(ReferenceActivity instance);
    partial void DeleteReferenceActivity(ReferenceActivity instance);
    partial void InsertReferenceDisability(ReferenceDisability instance);
    partial void UpdateReferenceDisability(ReferenceDisability instance);
    partial void DeleteReferenceDisability(ReferenceDisability instance);
    partial void InsertReferenceSubject(ReferenceSubject instance);
    partial void UpdateReferenceSubject(ReferenceSubject instance);
    partial void DeleteReferenceSubject(ReferenceSubject instance);
    partial void InsertAnswerString(AnswerString instance);
    partial void UpdateAnswerString(AnswerString instance);
    partial void DeleteAnswerString(AnswerString instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertReferenceProvided(ReferenceProvided instance);
    partial void UpdateReferenceProvided(ReferenceProvided instance);
    partial void DeleteReferenceProvided(ReferenceProvided instance);
    partial void InsertQuery(Query instance);
    partial void UpdateQuery(Query instance);
    partial void DeleteQuery(Query instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertIntent(Intent instance);
    partial void UpdateIntent(Intent instance);
    partial void DeleteIntent(Intent instance);
    partial void InsertLanguageCorrection(LanguageCorrection instance);
    partial void UpdateLanguageCorrection(LanguageCorrection instance);
    partial void DeleteLanguageCorrection(LanguageCorrection instance);
    partial void InsertDisabilitySynonym(DisabilitySynonym instance);
    partial void UpdateDisabilitySynonym(DisabilitySynonym instance);
    partial void DeleteDisabilitySynonym(DisabilitySynonym instance);
    partial void InsertSubjectSynonym(SubjectSynonym instance);
    partial void UpdateSubjectSynonym(SubjectSynonym instance);
    partial void DeleteSubjectSynonym(SubjectSynonym instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    #endregion
		
		public BotDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ViaSportBC_SQLdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BotDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BotDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Disability> Disabilities
		{
			get
			{
				return this.GetTable<Disability>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceActivity> ReferenceActivities
		{
			get
			{
				return this.GetTable<ReferenceActivity>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceDisability> ReferenceDisabilities
		{
			get
			{
				return this.GetTable<ReferenceDisability>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceSubject> ReferenceSubjects
		{
			get
			{
				return this.GetTable<ReferenceSubject>();
			}
		}
		
		public System.Data.Linq.Table<AnswerString> AnswerStrings
		{
			get
			{
				return this.GetTable<AnswerString>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceProvided> ReferenceProvideds
		{
			get
			{
				return this.GetTable<ReferenceProvided>();
			}
		}
		
		public System.Data.Linq.Table<Query> Queries
		{
			get
			{
				return this.GetTable<Query>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<Intent> Intents
		{
			get
			{
				return this.GetTable<Intent>();
			}
		}
		
		public System.Data.Linq.Table<LanguageCorrection> LanguageCorrections
		{
			get
			{
				return this.GetTable<LanguageCorrection>();
			}
		}
		
		public System.Data.Linq.Table<DisabilitySynonym> DisabilitySynonyms
		{
			get
			{
				return this.GetTable<DisabilitySynonym>();
			}
		}
		
		public System.Data.Linq.Table<SubjectSynonym> SubjectSynonyms
		{
			get
			{
				return this.GetTable<SubjectSynonym>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ReferenceActivity> _ReferenceActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Activity()
		{
			this._ReferenceActivities = new EntitySet<ReferenceActivity>(new Action<ReferenceActivity>(this.attach_ReferenceActivities), new Action<ReferenceActivity>(this.detach_ReferenceActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ReferenceActivity", Storage="_ReferenceActivities", ThisKey="Id", OtherKey="ActivityId")]
		public EntitySet<ReferenceActivity> ReferenceActivities
		{
			get
			{
				return this._ReferenceActivities;
			}
			set
			{
				this._ReferenceActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceActivities(ReferenceActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_ReferenceActivities(ReferenceActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ReferenceSubject> _ReferenceSubjects;
		
		private EntitySet<SubjectSynonym> _SubjectSynonyms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Subject()
		{
			this._ReferenceSubjects = new EntitySet<ReferenceSubject>(new Action<ReferenceSubject>(this.attach_ReferenceSubjects), new Action<ReferenceSubject>(this.detach_ReferenceSubjects));
			this._SubjectSynonyms = new EntitySet<SubjectSynonym>(new Action<SubjectSynonym>(this.attach_SubjectSynonyms), new Action<SubjectSynonym>(this.detach_SubjectSynonyms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ReferenceSubject", Storage="_ReferenceSubjects", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<ReferenceSubject> ReferenceSubjects
		{
			get
			{
				return this._ReferenceSubjects;
			}
			set
			{
				this._ReferenceSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSynonym", Storage="_SubjectSynonyms", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<SubjectSynonym> SubjectSynonyms
		{
			get
			{
				return this._SubjectSynonyms;
			}
			set
			{
				this._SubjectSynonyms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceSubjects(ReferenceSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_ReferenceSubjects(ReferenceSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_SubjectSynonyms(SubjectSynonym entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectSynonyms(SubjectSynonym entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disability")]
	public partial class Disability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ReferenceDisability> _ReferenceDisabilities;
		
		private EntitySet<DisabilitySynonym> _DisabilitySynonyms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Disability()
		{
			this._ReferenceDisabilities = new EntitySet<ReferenceDisability>(new Action<ReferenceDisability>(this.attach_ReferenceDisabilities), new Action<ReferenceDisability>(this.detach_ReferenceDisabilities));
			this._DisabilitySynonyms = new EntitySet<DisabilitySynonym>(new Action<DisabilitySynonym>(this.attach_DisabilitySynonyms), new Action<DisabilitySynonym>(this.detach_DisabilitySynonyms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disability_ReferenceDisability", Storage="_ReferenceDisabilities", ThisKey="Id", OtherKey="DisabilityId")]
		public EntitySet<ReferenceDisability> ReferenceDisabilities
		{
			get
			{
				return this._ReferenceDisabilities;
			}
			set
			{
				this._ReferenceDisabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disability_DisabilitySynonym", Storage="_DisabilitySynonyms", ThisKey="Id", OtherKey="DisabilityId")]
		public EntitySet<DisabilitySynonym> DisabilitySynonyms
		{
			get
			{
				return this._DisabilitySynonyms;
			}
			set
			{
				this._DisabilitySynonyms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceDisabilities(ReferenceDisability entity)
		{
			this.SendPropertyChanging();
			entity.Disability = this;
		}
		
		private void detach_ReferenceDisabilities(ReferenceDisability entity)
		{
			this.SendPropertyChanging();
			entity.Disability = null;
		}
		
		private void attach_DisabilitySynonyms(DisabilitySynonym entity)
		{
			this.SendPropertyChanging();
			entity.Disability = this;
		}
		
		private void detach_DisabilitySynonyms(DisabilitySynonym entity)
		{
			this.SendPropertyChanging();
			entity.Disability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceActivity")]
	public partial class ReferenceActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReferenceId;
		
		private int _ActivityId;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    #endregion
		
		public ReferenceActivity()
		{
			this._Activity = default(EntityRef<Activity>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="Int NOT NULL")]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ReferenceActivity", Storage="_Activity", ThisKey="ActivityId", OtherKey="Id", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.ReferenceActivities.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.ReferenceActivities.Add(this);
						this._ActivityId = value.Id;
					}
					else
					{
						this._ActivityId = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceActivity", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.ReferenceActivities.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.ReferenceActivities.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceDisability")]
	public partial class ReferenceDisability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReferenceId;
		
		private int _DisabilityId;
		
		private EntityRef<Disability> _Disability;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    partial void OnDisabilityIdChanging(int value);
    partial void OnDisabilityIdChanged();
    #endregion
		
		public ReferenceDisability()
		{
			this._Disability = default(EntityRef<Disability>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityId", DbType="Int NOT NULL")]
		public int DisabilityId
		{
			get
			{
				return this._DisabilityId;
			}
			set
			{
				if ((this._DisabilityId != value))
				{
					if (this._Disability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisabilityIdChanging(value);
					this.SendPropertyChanging();
					this._DisabilityId = value;
					this.SendPropertyChanged("DisabilityId");
					this.OnDisabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disability_ReferenceDisability", Storage="_Disability", ThisKey="DisabilityId", OtherKey="Id", IsForeignKey=true)]
		public Disability Disability
		{
			get
			{
				return this._Disability.Entity;
			}
			set
			{
				Disability previousValue = this._Disability.Entity;
				if (((previousValue != value) 
							|| (this._Disability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disability.Entity = null;
						previousValue.ReferenceDisabilities.Remove(this);
					}
					this._Disability.Entity = value;
					if ((value != null))
					{
						value.ReferenceDisabilities.Add(this);
						this._DisabilityId = value.Id;
					}
					else
					{
						this._DisabilityId = default(int);
					}
					this.SendPropertyChanged("Disability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceDisability", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.ReferenceDisabilities.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.ReferenceDisabilities.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceSubject")]
	public partial class ReferenceSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReferenceId;
		
		private int _SubjectId;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    #endregion
		
		public ReferenceSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ReferenceSubject", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.ReferenceSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.ReferenceSubjects.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceSubject", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.ReferenceSubjects.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.ReferenceSubjects.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerStrings")]
	public partial class AnswerString : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AnswerType;
		
		private string _AnswerText;
		
		private string _Locale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAnswerTypeChanging(string value);
    partial void OnAnswerTypeChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnLocaleChanging(string value);
    partial void OnLocaleChanged();
    #endregion
		
		public AnswerString()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AnswerType
		{
			get
			{
				return this._AnswerType;
			}
			set
			{
				if ((this._AnswerType != value))
				{
					this.OnAnswerTypeChanging(value);
					this.SendPropertyChanging();
					this._AnswerType = value;
					this.SendPropertyChanged("AnswerType");
					this.OnAnswerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locale", DbType="NChar(10)")]
		public string Locale
		{
			get
			{
				return this._Locale;
			}
			set
			{
				if ((this._Locale != value))
				{
					this.OnLocaleChanging(value);
					this.SendPropertyChanging();
					this._Locale = value;
					this.SendPropertyChanged("Locale");
					this.OnLocaleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ChannelId;
		
		private string _ConversationId;
		
		private System.Nullable<System.DateTime> _UtcDateTime;
		
		private string _Locale;
		
		private EntitySet<Query> _Queries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChannelIdChanging(string value);
    partial void OnChannelIdChanged();
    partial void OnConversationIdChanging(string value);
    partial void OnConversationIdChanged();
    partial void OnUtcDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUtcDateTimeChanged();
    partial void OnLocaleChanging(string value);
    partial void OnLocaleChanged();
    #endregion
		
		public Session()
		{
			this._Queries = new EntitySet<Query>(new Action<Query>(this.attach_Queries), new Action<Query>(this.detach_Queries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelId", DbType="NVarChar(50)")]
		public string ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversationId", DbType="NVarChar(50)")]
		public string ConversationId
		{
			get
			{
				return this._ConversationId;
			}
			set
			{
				if ((this._ConversationId != value))
				{
					this.OnConversationIdChanging(value);
					this.SendPropertyChanging();
					this._ConversationId = value;
					this.SendPropertyChanged("ConversationId");
					this.OnConversationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtcDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UtcDateTime
		{
			get
			{
				return this._UtcDateTime;
			}
			set
			{
				if ((this._UtcDateTime != value))
				{
					this.OnUtcDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UtcDateTime = value;
					this.SendPropertyChanged("UtcDateTime");
					this.OnUtcDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locale", DbType="NVarChar(10)")]
		public string Locale
		{
			get
			{
				return this._Locale;
			}
			set
			{
				if ((this._Locale != value))
				{
					this.OnLocaleChanging(value);
					this.SendPropertyChanging();
					this._Locale = value;
					this.SendPropertyChanged("Locale");
					this.OnLocaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Query", Storage="_Queries", ThisKey="ID", OtherKey="SessionId")]
		public EntitySet<Query> Queries
		{
			get
			{
				return this._Queries;
			}
			set
			{
				this._Queries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Queries(Query entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Queries(Query entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceProvided")]
	public partial class ReferenceProvided : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReferenceId;
		
		private int _QueryId;
		
		private EntityRef<Query> _Query;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    partial void OnQueryIdChanging(int value);
    partial void OnQueryIdChanged();
    #endregion
		
		public ReferenceProvided()
		{
			this._Query = default(EntityRef<Query>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueryId", DbType="Int NOT NULL")]
		public int QueryId
		{
			get
			{
				return this._QueryId;
			}
			set
			{
				if ((this._QueryId != value))
				{
					if (this._Query.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueryIdChanging(value);
					this.SendPropertyChanging();
					this._QueryId = value;
					this.SendPropertyChanged("QueryId");
					this.OnQueryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_ReferenceProvided", Storage="_Query", ThisKey="QueryId", OtherKey="ID", IsForeignKey=true)]
		public Query Query
		{
			get
			{
				return this._Query.Entity;
			}
			set
			{
				Query previousValue = this._Query.Entity;
				if (((previousValue != value) 
							|| (this._Query.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Query.Entity = null;
						previousValue.ReferenceProvideds.Remove(this);
					}
					this._Query.Entity = value;
					if ((value != null))
					{
						value.ReferenceProvideds.Add(this);
						this._QueryId = value.ID;
					}
					else
					{
						this._QueryId = default(int);
					}
					this.SendPropertyChanged("Query");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceProvided", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.ReferenceProvideds.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.ReferenceProvideds.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Query")]
	public partial class Query : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SessionId;
		
		private System.Nullable<System.DateTime> _UtcDateTime;
		
		private EntitySet<ReferenceProvided> _ReferenceProvideds;
		
		private EntitySet<Entity> _Entities;
		
		private EntitySet<Intent> _Intents;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnUtcDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUtcDateTimeChanged();
    #endregion
		
		public Query()
		{
			this._ReferenceProvideds = new EntitySet<ReferenceProvided>(new Action<ReferenceProvided>(this.attach_ReferenceProvideds), new Action<ReferenceProvided>(this.detach_ReferenceProvideds));
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			this._Intents = new EntitySet<Intent>(new Action<Intent>(this.attach_Intents), new Action<Intent>(this.detach_Intents));
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtcDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UtcDateTime
		{
			get
			{
				return this._UtcDateTime;
			}
			set
			{
				if ((this._UtcDateTime != value))
				{
					this.OnUtcDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UtcDateTime = value;
					this.SendPropertyChanged("UtcDateTime");
					this.OnUtcDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_ReferenceProvided", Storage="_ReferenceProvideds", ThisKey="ID", OtherKey="QueryId")]
		public EntitySet<ReferenceProvided> ReferenceProvideds
		{
			get
			{
				return this._ReferenceProvideds;
			}
			set
			{
				this._ReferenceProvideds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_Entity", Storage="_Entities", ThisKey="ID", OtherKey="QueryId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_Intent", Storage="_Intents", ThisKey="ID", OtherKey="QueryId")]
		public EntitySet<Intent> Intents
		{
			get
			{
				return this._Intents;
			}
			set
			{
				this._Intents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Query", Storage="_Session", ThisKey="SessionId", OtherKey="ID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Queries.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Queries.Add(this);
						this._SessionId = value.ID;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceProvideds(ReferenceProvided entity)
		{
			this.SendPropertyChanging();
			entity.Query = this;
		}
		
		private void detach_ReferenceProvideds(ReferenceProvided entity)
		{
			this.SendPropertyChanging();
			entity.Query = null;
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Query = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.Query = null;
		}
		
		private void attach_Intents(Intent entity)
		{
			this.SendPropertyChanging();
			entity.Query = this;
		}
		
		private void detach_Intents(Intent entity)
		{
			this.SendPropertyChanging();
			entity.Query = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entity")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _QueryId;
		
		private string _EntityValue;
		
		private System.Nullable<float> _EntityScore;
		
		private string _EntityType;
		
		private EntityRef<Query> _Query;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQueryIdChanging(System.Nullable<int> value);
    partial void OnQueryIdChanged();
    partial void OnEntityValueChanging(string value);
    partial void OnEntityValueChanged();
    partial void OnEntityScoreChanging(System.Nullable<float> value);
    partial void OnEntityScoreChanged();
    partial void OnEntityTypeChanging(string value);
    partial void OnEntityTypeChanged();
    #endregion
		
		public Entity()
		{
			this._Query = default(EntityRef<Query>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueryId", DbType="Int")]
		public System.Nullable<int> QueryId
		{
			get
			{
				return this._QueryId;
			}
			set
			{
				if ((this._QueryId != value))
				{
					if (this._Query.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueryIdChanging(value);
					this.SendPropertyChanging();
					this._QueryId = value;
					this.SendPropertyChanged("QueryId");
					this.OnQueryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityValue", DbType="NVarChar(50)")]
		public string EntityValue
		{
			get
			{
				return this._EntityValue;
			}
			set
			{
				if ((this._EntityValue != value))
				{
					this.OnEntityValueChanging(value);
					this.SendPropertyChanging();
					this._EntityValue = value;
					this.SendPropertyChanged("EntityValue");
					this.OnEntityValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityScore", DbType="Real")]
		public System.Nullable<float> EntityScore
		{
			get
			{
				return this._EntityScore;
			}
			set
			{
				if ((this._EntityScore != value))
				{
					this.OnEntityScoreChanging(value);
					this.SendPropertyChanging();
					this._EntityScore = value;
					this.SendPropertyChanged("EntityScore");
					this.OnEntityScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityType", DbType="NVarChar(50)")]
		public string EntityType
		{
			get
			{
				return this._EntityType;
			}
			set
			{
				if ((this._EntityType != value))
				{
					this.OnEntityTypeChanging(value);
					this.SendPropertyChanging();
					this._EntityType = value;
					this.SendPropertyChanged("EntityType");
					this.OnEntityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_Entity", Storage="_Query", ThisKey="QueryId", OtherKey="ID", IsForeignKey=true)]
		public Query Query
		{
			get
			{
				return this._Query.Entity;
			}
			set
			{
				Query previousValue = this._Query.Entity;
				if (((previousValue != value) 
							|| (this._Query.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Query.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._Query.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._QueryId = value.ID;
					}
					else
					{
						this._QueryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Query");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Intent")]
	public partial class Intent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _QueryId;
		
		private string _IntentName;
		
		private System.Nullable<float> _IntentScore;
		
		private EntityRef<Query> _Query;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQueryIdChanging(int value);
    partial void OnQueryIdChanged();
    partial void OnIntentNameChanging(string value);
    partial void OnIntentNameChanged();
    partial void OnIntentScoreChanging(System.Nullable<float> value);
    partial void OnIntentScoreChanged();
    #endregion
		
		public Intent()
		{
			this._Query = default(EntityRef<Query>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueryId", DbType="Int NOT NULL")]
		public int QueryId
		{
			get
			{
				return this._QueryId;
			}
			set
			{
				if ((this._QueryId != value))
				{
					if (this._Query.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueryIdChanging(value);
					this.SendPropertyChanging();
					this._QueryId = value;
					this.SendPropertyChanged("QueryId");
					this.OnQueryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentName", DbType="NVarChar(50)")]
		public string IntentName
		{
			get
			{
				return this._IntentName;
			}
			set
			{
				if ((this._IntentName != value))
				{
					this.OnIntentNameChanging(value);
					this.SendPropertyChanging();
					this._IntentName = value;
					this.SendPropertyChanged("IntentName");
					this.OnIntentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentScore", DbType="Real")]
		public System.Nullable<float> IntentScore
		{
			get
			{
				return this._IntentScore;
			}
			set
			{
				if ((this._IntentScore != value))
				{
					this.OnIntentScoreChanging(value);
					this.SendPropertyChanging();
					this._IntentScore = value;
					this.SendPropertyChanged("IntentScore");
					this.OnIntentScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Query_Intent", Storage="_Query", ThisKey="QueryId", OtherKey="ID", IsForeignKey=true)]
		public Query Query
		{
			get
			{
				return this._Query.Entity;
			}
			set
			{
				Query previousValue = this._Query.Entity;
				if (((previousValue != value) 
							|| (this._Query.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Query.Entity = null;
						previousValue.Intents.Remove(this);
					}
					this._Query.Entity = value;
					if ((value != null))
					{
						value.Intents.Add(this);
						this._QueryId = value.ID;
					}
					else
					{
						this._QueryId = default(int);
					}
					this.SendPropertyChanged("Query");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LanguageCorrection")]
	public partial class LanguageCorrection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OutdatedTerm;
		
		private string _PreferredTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOutdatedTermChanging(string value);
    partial void OnOutdatedTermChanged();
    partial void OnPreferredTermChanging(string value);
    partial void OnPreferredTermChanged();
    #endregion
		
		public LanguageCorrection()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutdatedTerm", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OutdatedTerm
		{
			get
			{
				return this._OutdatedTerm;
			}
			set
			{
				if ((this._OutdatedTerm != value))
				{
					this.OnOutdatedTermChanging(value);
					this.SendPropertyChanging();
					this._OutdatedTerm = value;
					this.SendPropertyChanged("OutdatedTerm");
					this.OnOutdatedTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredTerm", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PreferredTerm
		{
			get
			{
				return this._PreferredTerm;
			}
			set
			{
				if ((this._PreferredTerm != value))
				{
					this.OnPreferredTermChanging(value);
					this.SendPropertyChanging();
					this._PreferredTerm = value;
					this.SendPropertyChanged("PreferredTerm");
					this.OnPreferredTermChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisabilitySynonym")]
	public partial class DisabilitySynonym : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DisabilityId;
		
		private string _Synonym;
		
		private EntityRef<Disability> _Disability;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDisabilityIdChanging(int value);
    partial void OnDisabilityIdChanged();
    partial void OnSynonymChanging(string value);
    partial void OnSynonymChanged();
    #endregion
		
		public DisabilitySynonym()
		{
			this._Disability = default(EntityRef<Disability>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityId", DbType="Int NOT NULL")]
		public int DisabilityId
		{
			get
			{
				return this._DisabilityId;
			}
			set
			{
				if ((this._DisabilityId != value))
				{
					if (this._Disability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisabilityIdChanging(value);
					this.SendPropertyChanging();
					this._DisabilityId = value;
					this.SendPropertyChanged("DisabilityId");
					this.OnDisabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Synonym", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Synonym
		{
			get
			{
				return this._Synonym;
			}
			set
			{
				if ((this._Synonym != value))
				{
					this.OnSynonymChanging(value);
					this.SendPropertyChanging();
					this._Synonym = value;
					this.SendPropertyChanged("Synonym");
					this.OnSynonymChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disability_DisabilitySynonym", Storage="_Disability", ThisKey="DisabilityId", OtherKey="Id", IsForeignKey=true)]
		public Disability Disability
		{
			get
			{
				return this._Disability.Entity;
			}
			set
			{
				Disability previousValue = this._Disability.Entity;
				if (((previousValue != value) 
							|| (this._Disability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disability.Entity = null;
						previousValue.DisabilitySynonyms.Remove(this);
					}
					this._Disability.Entity = value;
					if ((value != null))
					{
						value.DisabilitySynonyms.Add(this);
						this._DisabilityId = value.Id;
					}
					else
					{
						this._DisabilityId = default(int);
					}
					this.SendPropertyChanged("Disability");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectSynonym")]
	public partial class SubjectSynonym : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubjectId;
		
		private string _Synonym;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnSynonymChanging(string value);
    partial void OnSynonymChanged();
    #endregion
		
		public SubjectSynonym()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Synonym", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Synonym
		{
			get
			{
				return this._Synonym;
			}
			set
			{
				if ((this._Synonym != value))
				{
					this.OnSynonymChanging(value);
					this.SendPropertyChanging();
					this._Synonym = value;
					this.SendPropertyChanged("Synonym");
					this.OnSynonymChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSynonym", Storage="_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectSynonyms.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectSynonyms.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Subtitle;
		
		private string _CardText;
		
		private string _CardImageUri;
		
		private string _ReferenceUri;
		
		private string _Intent;
		
		private System.Nullable<bool> _deleted;
		
		private System.Data.Linq.Binary _version;
		
		private System.DateTimeOffset _createdAt;
		
		private System.DateTimeOffset _updatedAt;
		
		private string _Location;
		
		private EntitySet<ReferenceActivity> _ReferenceActivities;
		
		private EntitySet<ReferenceDisability> _ReferenceDisabilities;
		
		private EntitySet<ReferenceSubject> _ReferenceSubjects;
		
		private EntitySet<ReferenceProvided> _ReferenceProvideds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubtitleChanging(string value);
    partial void OnSubtitleChanged();
    partial void OnCardTextChanging(string value);
    partial void OnCardTextChanged();
    partial void OnCardImageUriChanging(string value);
    partial void OnCardImageUriChanged();
    partial void OnReferenceUriChanging(string value);
    partial void OnReferenceUriChanged();
    partial void OnIntentChanging(string value);
    partial void OnIntentChanged();
    partial void OndeletedChanging(System.Nullable<bool> value);
    partial void OndeletedChanged();
    partial void OnversionChanging(System.Data.Linq.Binary value);
    partial void OnversionChanged();
    partial void OncreatedAtChanging(System.DateTimeOffset value);
    partial void OncreatedAtChanged();
    partial void OnupdatedAtChanging(System.DateTimeOffset value);
    partial void OnupdatedAtChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Reference()
		{
			this._ReferenceActivities = new EntitySet<ReferenceActivity>(new Action<ReferenceActivity>(this.attach_ReferenceActivities), new Action<ReferenceActivity>(this.detach_ReferenceActivities));
			this._ReferenceDisabilities = new EntitySet<ReferenceDisability>(new Action<ReferenceDisability>(this.attach_ReferenceDisabilities), new Action<ReferenceDisability>(this.detach_ReferenceDisabilities));
			this._ReferenceSubjects = new EntitySet<ReferenceSubject>(new Action<ReferenceSubject>(this.attach_ReferenceSubjects), new Action<ReferenceSubject>(this.detach_ReferenceSubjects));
			this._ReferenceProvideds = new EntitySet<ReferenceProvided>(new Action<ReferenceProvided>(this.attach_ReferenceProvideds), new Action<ReferenceProvided>(this.detach_ReferenceProvideds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subtitle", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string Subtitle
		{
			get
			{
				return this._Subtitle;
			}
			set
			{
				if ((this._Subtitle != value))
				{
					this.OnSubtitleChanging(value);
					this.SendPropertyChanging();
					this._Subtitle = value;
					this.SendPropertyChanged("Subtitle");
					this.OnSubtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string CardText
		{
			get
			{
				return this._CardText;
			}
			set
			{
				if ((this._CardText != value))
				{
					this.OnCardTextChanging(value);
					this.SendPropertyChanging();
					this._CardText = value;
					this.SendPropertyChanged("CardText");
					this.OnCardTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardImageUri", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CardImageUri
		{
			get
			{
				return this._CardImageUri;
			}
			set
			{
				if ((this._CardImageUri != value))
				{
					this.OnCardImageUriChanging(value);
					this.SendPropertyChanging();
					this._CardImageUri = value;
					this.SendPropertyChanged("CardImageUri");
					this.OnCardImageUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceUri", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ReferenceUri
		{
			get
			{
				return this._ReferenceUri;
			}
			set
			{
				if ((this._ReferenceUri != value))
				{
					this.OnReferenceUriChanging(value);
					this.SendPropertyChanging();
					this._ReferenceUri = value;
					this.SendPropertyChanged("ReferenceUri");
					this.OnReferenceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intent", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Intent
		{
			get
			{
				return this._Intent;
			}
			set
			{
				if ((this._Intent != value))
				{
					this.OnIntentChanging(value);
					this.SendPropertyChanging();
					this._Intent = value;
					this.SendPropertyChanged("Intent");
					this.OnIntentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdAt", DbType="DateTimeOffset NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTimeOffset createdAt
		{
			get
			{
				return this._createdAt;
			}
			set
			{
				if ((this._createdAt != value))
				{
					this.OncreatedAtChanging(value);
					this.SendPropertyChanging();
					this._createdAt = value;
					this.SendPropertyChanged("createdAt");
					this.OncreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedAt", DbType="DateTimeOffset NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTimeOffset updatedAt
		{
			get
			{
				return this._updatedAt;
			}
			set
			{
				if ((this._updatedAt != value))
				{
					this.OnupdatedAtChanging(value);
					this.SendPropertyChanging();
					this._updatedAt = value;
					this.SendPropertyChanged("updatedAt");
					this.OnupdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceActivity", Storage="_ReferenceActivities", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<ReferenceActivity> ReferenceActivities
		{
			get
			{
				return this._ReferenceActivities;
			}
			set
			{
				this._ReferenceActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceDisability", Storage="_ReferenceDisabilities", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<ReferenceDisability> ReferenceDisabilities
		{
			get
			{
				return this._ReferenceDisabilities;
			}
			set
			{
				this._ReferenceDisabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceSubject", Storage="_ReferenceSubjects", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<ReferenceSubject> ReferenceSubjects
		{
			get
			{
				return this._ReferenceSubjects;
			}
			set
			{
				this._ReferenceSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_ReferenceProvided", Storage="_ReferenceProvideds", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<ReferenceProvided> ReferenceProvideds
		{
			get
			{
				return this._ReferenceProvideds;
			}
			set
			{
				this._ReferenceProvideds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceActivities(ReferenceActivity entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_ReferenceActivities(ReferenceActivity entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
		
		private void attach_ReferenceDisabilities(ReferenceDisability entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_ReferenceDisabilities(ReferenceDisability entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
		
		private void attach_ReferenceSubjects(ReferenceSubject entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_ReferenceSubjects(ReferenceSubject entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
		
		private void attach_ReferenceProvideds(ReferenceProvided entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_ReferenceProvideds(ReferenceProvided entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
	}
}
#pragma warning restore 1591
